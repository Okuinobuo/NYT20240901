import networkx as nx
import matplotlib.pyplot as plt
from networkx.algorithms import community
import community as community_louvain

# Example Data: Replace with actual data for nodes and edges
# Assuming 'edges' is a list of tuples representing the connections between nodes
edges = [
    (1, 3), (1, 6), (1, 15), (1, 27), 
    (3, 23), (3, 28), (9, 25), (12, 25),
    (25, 26), (25, 27), (25, 12), (26, 8),
    (26, 21), (26, 22), (2, 15), (4, 10),
    # Add more edges as per your data
]

# Create Graph
G = nx.Graph()
G.add_edges_from(edges)

# Detect Communities using Louvain Method
partition = community_louvain.best_partition(G)

# Assign colors to communities
colors = []
for node in G:
    colors.append(partition[node])

# Highlight specific nodes (OABSS related questions: 25, 26, 27, 28)
highlight_nodes = [25, 26, 27, 28]

# Draw Network
plt.figure(figsize=(12, 10))
pos = nx.spring_layout(G, seed=42)  # Position nodes using spring layout

# Draw nodes with community colors
nx.draw_networkx_nodes(G, pos, node_size=700, cmap=plt.cm.rainbow, node_color=colors)

# Draw edges
nx.draw_networkx_edges(G, pos, alpha=0.5)

# Highlight specific nodes with a thick border
nx.draw_networkx_nodes(G, pos, nodelist=highlight_nodes, node_size=700, edgecolors='black', linewidths=2)

# Draw labels
nx.draw_networkx_labels(G, pos, font_size=10)

plt.title('Community Detection in Network (OABSS Nodes Highlighted)')
plt.show()
